from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def import_db_usuario(database):
    global db
    db = database

class Usuarios(db.Model):
    tablename = 'usuarios'

    idusuario = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(255), nullable=False)
    rol = db.Column(db.String(30), nullable=False)
    imagen = db.Column(db.Text, nullable=True)
    contenidosfavoritos = db.Column(db.ARRAY(db.Integer)) 

    def repr(self):
        return f'<Usuario: {self.idusuario}>'
    
    def to_dict(self):
        return {
            'idusuario': self.idusuario,
            'nombre': self.nombre,
            'rol': self.rol,
            'imagen': self.imagen,
            'favoritos': self.contenidosfavoritos
        }

# class Usuario(Model):
#     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

#     Do not edit the class manually.
#     """

#     def __init__(self, id_usuario=None, nombre=None, rol=None, imagen=None, favoritos=None):  # noqa: E501
#         """Usuario - a model defined in OpenAPI

#         :param id_usuario: The id_usuario of this Usuario.  # noqa: E501
#         :type id_usuario: int
#         :param nombre: The nombre of this Usuario.  # noqa: E501
#         :type nombre: str
#         :param rol: The rol of this Usuario.  # noqa: E501
#         :type rol: str
#         :param imagen: The imagen of this Usuario.  # noqa: E501
#         :type imagen: List[str]
#         :param favoritos: The favoritos of this Usuario.  # noqa: E501
#         :type favoritos: List[int]
#         """
#         self.openapi_types = {
#             'id_usuario': int,
#             'nombre': str,
#             'rol': str,
#             'imagen': List[str],
#             'favoritos': List[int]
#         }

#         self.attribute_map = {
#             'id_usuario': 'idUsuario',
#             'nombre': 'nombre',
#             'rol': 'rol',
#             'imagen': 'imagen',
#             'favoritos': 'favoritos'
#         }

#         self._id_usuario = id_usuario
#         self._nombre = nombre
#         self._rol = rol
#         self._imagen = imagen
#         self._favoritos = favoritos

#     @classmethod
#     def from_dict(cls, dikt) -> 'Usuario':
#         """Returns the dict as a model

#         :param dikt: A dict.
#         :type: dict
#         :return: The Usuario of this Usuario.  # noqa: E501
#         :rtype: Usuario
#         """
#         return util.deserialize_model(dikt, cls)

#     @property
#     def id_usuario(self) -> int:
#         """Gets the id_usuario of this Usuario.

#         Identificador único del usuario  # noqa: E501

#         :return: The id_usuario of this Usuario.
#         :rtype: int
#         """
#         return self._id_usuario

#     @id_usuario.setter
#     def id_usuario(self, id_usuario: int):
#         """Sets the id_usuario of this Usuario.

#         Identificador único del usuario  # noqa: E501

#         :param id_usuario: The id_usuario of this Usuario.
#         :type id_usuario: int
#         """

#         self._id_usuario = id_usuario

#     @property
#     def nombre(self) -> str:
#         """Gets the nombre of this Usuario.

#         Nombre del usuario  # noqa: E501

#         :return: The nombre of this Usuario.
#         :rtype: str
#         """
#         return self._nombre

#     @nombre.setter
#     def nombre(self, nombre: str):
#         """Sets the nombre of this Usuario.

#         Nombre del usuario  # noqa: E501

#         :param nombre: The nombre of this Usuario.
#         :type nombre: str
#         """

#         self._nombre = nombre

#     @property
#     def rol(self) -> str:
#         """Gets the rol of this Usuario.

#         Papel que desempeña el usuario en la aplicación en base de las funciones que puede llevar a cabo  # noqa: E501

#         :return: The rol of this Usuario.
#         :rtype: str
#         """
#         return self._rol

#     @rol.setter
#     def rol(self, rol: str):
#         """Sets the rol of this Usuario.

#         Papel que desempeña el usuario en la aplicación en base de las funciones que puede llevar a cabo  # noqa: E501

#         :param rol: The rol of this Usuario.
#         :type rol: str
#         """
#         allowed_values = ["administrador", "cliente"]  # noqa: E501
#         if rol not in allowed_values:
#             raise ValueError(
#                 "Invalid value for `rol` ({0}), must be one of {1}"
#                 .format(rol, allowed_values)
#             )

#         self._rol = rol

#     @property
#     def imagen(self) -> List[str]:
#         """Gets the imagen of this Usuario.

#         Fotografía del usuario de la aplicación  # noqa: E501

#         :return: The imagen of this Usuario.
#         :rtype: List[str]
#         """
#         return self._imagen

#     @imagen.setter
#     def imagen(self, imagen: List[str]):
#         """Sets the imagen of this Usuario.

#         Fotografía del usuario de la aplicación  # noqa: E501

#         :param imagen: The imagen of this Usuario.
#         :type imagen: List[str]
#         """

#         self._imagen = imagen

#     @property
#     def favoritos(self) -> List[int]:
#         """Gets the favoritos of this Usuario.

#         Representa la lista de contenidos multimedia de la aplicacion que el usuario ha marcado como favoritos. Este array almacenará únicamente el identificador de dichos contenidos con el fin de simplificar y facilitar la implementación de la aplicación.  # noqa: E501

#         :return: The favoritos of this Usuario.
#         :rtype: List[int]
#         """
#         return self._favoritos

#     @favoritos.setter
#     def favoritos(self, favoritos: List[int]):
#         """Sets the favoritos of this Usuario.

#         Representa la lista de contenidos multimedia de la aplicacion que el usuario ha marcado como favoritos. Este array almacenará únicamente el identificador de dichos contenidos con el fin de simplificar y facilitar la implementación de la aplicación.  # noqa: E501

#         :param favoritos: The favoritos of this Usuario.
#         :type favoritos: List[int]
#         """

#         self._favoritos = favoritos
